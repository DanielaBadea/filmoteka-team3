{"mappings":"oeACA,IAAAA,EAAAC,EAAA,S,aAGAC,SAASC,iBAAiB,oBAAoB,WACtBD,SAASE,cAAc,kBAC/BD,iBAAiB,SAG/B,WACE,MAAME,EAAoBH,SAASE,cAAc,wBAC3CE,EAAkBJ,SAASE,cAAc,sBAC/CC,EAAkBE,UAAUC,OAAO,YACnCF,EAAgBC,UAAUE,IAAI,W,IAGhC,WACE,MAAMJ,EAAoBH,SAASE,cAAc,wBAG3CM,GAAgB,EAAAV,EAAAW,kBAAiB,YAAc,GAErD,GAAID,GAAiBA,EAAcE,OAAS,EAAG,CAC7C,IAAIC,EAoDV,SAAiCH,GAC/B,MAAMI,GAAa,EAAAd,EAAAW,kBAAiB,cAC9BI,GAAa,EAAAf,EAAAW,kBAAiB,cACpC,IAAIK,EAAiB,GAErB,IAAKF,IAAeC,EAElB,OADAE,QAAQC,MAAM,wCACPF,EAGT,IAAK,IAAIG,EAAI,EAAGA,EAAIT,EAAcE,OAAQO,IACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAWF,OAAQQ,IACrC,GAAIC,SAASP,EAAWM,GAAGE,MAAQD,SAASX,EAAcS,IAAK,CAC7D,MAAMI,EAAe,IAAKT,EAAWM,IAC/BI,EAAWD,EAAaE,UAC1BD,GAAYE,MAAMC,QAAQH,IAC5BD,EAAaK,YAAcb,EAAWc,QAAOC,GAASN,EAASO,SAASD,EAAMR,MAAKU,KAAIF,GAASA,EAAMG,OAAMC,KAAK,MACjHlB,EAAemB,KAAKZ,IAEpBN,QAAQC,MAAM,uDAAuDK,EAAaD,K,CAK1F,OAAON,C,CA5EUoB,CAAwB1B,GACrC,MAAM2B,EAAgBxB,EAAOmB,KAAI,EAACM,eAAEA,EAAcC,YAAEA,EAAWC,aAAEA,EAAYlB,GAAEA,EAAEM,YAAEA,EAAWa,aAAEA,MAC9F,IAAIC,EAAa,GAEfA,EADEH,EACW,GAAGI,EAAAC,eAAeD,EAAAE,YAAYN,IAE9B,mBAEf,MAAMO,EAAcL,EAAaM,MAAM,EAAG,GAC1C,MAAO,oCAAoCzB,+EAGhCoB,wBACAJ,6GAIwBE,EAAaQ,QAAQ,kHAEJV,kHAEHV,kEACCkB,4DAG5C,IACLZ,KAAK,IAER7B,EAAkB4C,UAAYZ,C,MAE9BhC,EAAkB4C,UAAY,iC,CA9ClCC,E","sources":["src/js/watched.js"],"sourcesContent":["// import { STORAGE_KEY_WATCHED } from \"./constants\";\nimport { loadLocalStorage } from \"./storage\";\nimport { IMG_BASE_URL, IMG_W500, getMovieDetails } from \"./api\";\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const watchedButton = document.querySelector('#watchedButton');\n  watchedButton.addEventListener('click', displayWatchedMovies);\n  handleWatchedButtonClick();\n\n  function displayWatchedMovies() {\n    const watchedMoviesList = document.querySelector('.watched-movies-list');\n    const queueMoviesList = document.querySelector('.queue-movies-list');\n    watchedMoviesList.classList.remove('inactive')\n    queueMoviesList.classList.add('inactive')\n  }\n\n  function handleWatchedButtonClick() {\n    const watchedMoviesList = document.querySelector('.watched-movies-list');\n\n\n    const watchedMovies = loadLocalStorage('watched') || [];\n\n    if (watchedMovies && watchedMovies.length > 0) {\n      var movies = getWatchedMoviesDetails(watchedMovies);\n      const postersMarkup = movies.map(({ original_title, poster_path, vote_average, id, genre_names, release_date }) => {\n        let posterPath = '';\n        if (poster_path) {\n          posterPath = `${IMG_BASE_URL}${IMG_W500}/${poster_path}`;\n        } else {\n          posterPath = 'No found poster!';\n        }\n        const releaseYear = release_date.slice(0, 4);\n        return `<li class='list-cards-item' key='${id}'>\n          <img\n            class='poster-list__img'\n            src='${posterPath}'\n            alt='${original_title}'\n            width\n            loading='lazy'\n          />\n          <span class='poster-list-rate'>${vote_average.toFixed(1)}</span>\n          <div class='poster-list-wrap'>\n            <h2 class='poster-list-title text-posters'><b>${original_title}</b></h2>\n            <div class='poster-list-info'>\n              <p class='poster-list-text text-posters'>${genre_names}</p>\n              <p class='poster-list-age text-posters'>| ${releaseYear}</p>\n            </div>\n          </div>\n        </li>`;\n      }).join('');\n\n      watchedMoviesList.innerHTML = postersMarkup;\n    } else {\n      watchedMoviesList.innerHTML = '<p>No watched movies found.</p>';\n      // Schimbă starea vizibilității\n    }\n  }\n});\n\n// function getWatchedMoviesDetails(watchedMovies) {\n//   const moviesData = loadLocalStorage('moviesData');\n//   const watchedList = loadLocalStorage('watchedList');\n//   var moviesDetailed = [];\n//   for (let i = 0; i < watchedMovies.length; i++) {\n//     for (let j = 0; j < moviesData.length; j++) {\n//       if (parseInt(moviesData[j].id) === parseInt(watchedMovies[i])) {\n//         // Adăugați informații despre genuri în detaliile filmelor\n//         const movieDetails = { ...moviesData[j] };\n//         movieDetails.genre_names = watchedList.filter(genre => movieDetails.genre_ids.includes(genre.id)).map(genre => genre.name).join(', ');\n//         moviesDetailed.push(movieDetails);\n//       }\n//     }\n//   }\n//   return moviesDetailed;\n// }\nfunction getWatchedMoviesDetails(watchedMovies) {\n  const moviesData = loadLocalStorage('moviesData');\n  const genresList = loadLocalStorage('genresList');\n  var moviesDetailed = [];\n\n  if (!moviesData || !genresList) {\n    console.error(\"Error: Missing data in local storage\");\n    return moviesDetailed;\n  }\n\n  for (let i = 0; i < watchedMovies.length; i++) {\n    for (let j = 0; j < moviesData.length; j++) {\n      if (parseInt(moviesData[j].id) === parseInt(watchedMovies[i])) {\n        const movieDetails = { ...moviesData[j] };\n        const genreIds = movieDetails.genre_ids;\n        if (genreIds && Array.isArray(genreIds)) {\n          movieDetails.genre_names = genresList.filter(genre => genreIds.includes(genre.id)).map(genre => genre.name).join(', ');\n          moviesDetailed.push(movieDetails);\n        } else {\n          console.error(`Error: Missing genre_ids property for movie with ID ${movieDetails.id}`);\n        }\n      }\n    }\n  }\n  return moviesDetailed;\n}\n"],"names":["$5uEKZ","parcelRequire","document","addEventListener","querySelector","watchedMoviesList","queueMoviesList","classList","remove","add","watchedMovies","loadLocalStorage","length","movies","moviesData","genresList","moviesDetailed","console","error","i","j","parseInt","id","movieDetails","genreIds","genre_ids","Array","isArray","genre_names","filter","genre","includes","map","name","join","push","$7126a8cfa5cf9b17$var$getWatchedMoviesDetails","postersMarkup","original_title","poster_path","vote_average","release_date","posterPath","$7rYDH","IMG_BASE_URL","IMG_W500","releaseYear","slice","toFixed","innerHTML","handleWatchedButtonClick"],"version":3,"file":"my-library.521a677c.js.map"}